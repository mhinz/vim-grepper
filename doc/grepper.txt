*grepper.txt*  Helps you win at grep!
*grepper*

  by Marco Hinz~

  Twitter: https://twitter.com/_mhinz_
  Github:  http://github.com/mhinz
  IRC:     mhi^ (Freenode)
>
  If you use any of my plugins, please star them on github. It's a great way
  of getting feedback and gives me the kick to put more time into their
  development.

  If you encounter any bugs or have feature requests, just open an issue
  report on Github.

  Thank you for flying mhi^ airlines. Get the Vim on!
<
==============================================================================
CONTENTS                                                      *grepper-contents*

            INTRO .................. |grepper-intro|
            COMMAND ................ |grepper-:Grepper|
            MAPPINGS ............... |grepper-mappings|
            OPTIONS ................ |grepper-options|
            AUTOCMD ................ |grepper-autocmd|
            COLORS ................. |grepper-colors|
            EXAMPLE ................ |grepper-example|

==============================================================================
INTRO                                                            *grepper-intro*

This plugin is a convenience wrapper around |'grepprg'| and |'grepformat'|,
supports most common grep tools, and is easily extendable.

You choose a tool, enter a query, and get your matches into a |quickfix| list.

If you use Neovim, the search will be executed asynchronously. Thus you will
be able to continue editing while the grep program is still running.

Supports by default:~

    git grep
    ag
    pt
    ack
    grep
    findstr

NOTE: Your grep tool and query will be provided to a shell, so feel free to
use its power. E.g. if your tool is "git grep", your query could be "foo |
head -n10". Then the quickfix list would only show the first 10 matches. Be
creative!

==============================================================================
COMMANDS                                                      *grepper-:Grepper*

There is only one command:
>
    :Grepper[!] [flags]
<
Supported flags:~

    -[no]dispatch         -> use vim-dispatch
    -[no]quickfix         -> use quickfix list (or location list)
    -[no]open             -> open quickfix/location window
    -[no]switch           -> switch to qf/loc window
    -tool <tool>          -> any supported tool
    -cword[!]             -> use word under cursor as query
    -query <query>        -> skip the search prompt

:Grepper opens the search prompt with the default tool. If you want to switch
to another tool, hit <tab>.

After you inserted a query and hit <cr>, an external process will be kicked
off and its result will be put into the quickfix list.

If the query is empty, |:<cword>| will be used for searching.

Use |CTRL-C| to close the prompt without searching anything.

The default behaviour of :Grepper mimics |:grep|, so the quickfix window won't
be opened and one jumps to the first found match.

If you don't want to jump to the first match, again mimicking |:grep|, append
a bang instead:
>
    :Grepper!
<
Taking all flags into account, this is what :Grepper does by default:
>
    :Grepper -quickfix -noopen -noswitch<cr>
<
Of course you don't have to specify this all the time, you can just use
|grepper-options| to to the same. The cool thing about flags is, that you can
use multiple mappings with differing configurations:
>
    nnoremap <leader>git :Grepper  -tool git -open<cr>
    nnoremap <leader>ag  :Grepper! -tool ag  -open -switch<cr>
<
The search prompt supports file completion, which unfortunately can never be as
good as the built-in file completion of commands. So if you often have to
specify directories, use a mapping like this instead:
>
    nnoremap <leader>ag :Grepper -tool ag -query<space>
<
This way the commandline pops up populated with this line already and you can
use the full power of file completion. And since the query is specified on the
commandline already, the search prompt is skipped.

NOTE: Use <up> and <down> to go through the input history or <c-f> to open it
in the |cmdwin|.
>
    nnoremap <leader>* :Grepper -tool git -cword!<cr>
<
Populate the prompt with the word under cursor. If [!] is given, the prompt is
skipped and the search is started right away.

==============================================================================
MAPPINGS                                                      *grepper-mappings*

There are no pre-defined mappings, but one operator that should be used:
>
    nmap gs  <plug>(GrepperOperator)
    xmap gs  <plug>(GrepperOperator)
<
This defines an |operator| "gs" that takes any |{motion}| and uses that
selection to populate the search prompt. The query is quoted automatically.

Useful examples are gsW, gsiw, or gsi". See |text-objects| for all of them.

In visual mode, it uses the current selection.

If you have vim-repeat installed, you can repeat the operator action. For
example, you can "gsiw" on "nice_word" to populate the search prompt with
"nice_word". Next time you hit ".", "gsiw" will be repeated and the search
prompt populated with the current |word| under the cursor.

Quickfix/location window:~

By default Vim supports <cr> to open the current entry in the last window and
gf to open the current entry in the current window.

Additionally this plugin defines two mappings s and t to open the current
entry in a new split or tab respectively.

==============================================================================
OPTIONS                                                        *grepper-options*

Opposed to most other plugins, there aren't several global variables, but only
one global |Dictionary|: g:grepper. All keys of this dictionary are plugin
options. The shown values are also the default values.

NOTE: If you're unsure how to use a dictionary, have a look at
|grepper-example|.
>
    'dispatch': 0
<
Can be used to start an async search with Vim. It uses |dispatch-:Make| from
vim-dispatch.
>
    'quickfix': 1
<
Use the quickfix list for the matches or the location list otherwise.
>
    'open': 0
<
Do open the the quickfix/location window after the grep tool finished running
(and there was at least one match).
>
    'switch': 0
<
When the quickfix/location window opens, switch to it.
>
    'jump': 1
<
Automatically jump to the first match.
>
    'tools': ['git', 'ag', 'pt', 'ack', 'grep']
<
These are the tools that you can choose between (as long as they're
executable). The order matters. The first element is the default tool.

NOTE: Because of a name clash, some systems use "ack-grep" instead of "ack".
If you include "ack" here, "ack-grep" will be found, too.
>
    'next_tool': '<tab>'
<
These keys will be used during the search prompt to switch to the next tool.

NOTE: This could also be the same keys as the ones that opened the search
prompt in the first place, e.g.:
>
    nnoremap <leader>g :Grepper!<cr>
    let g:grepper = {}
    let g:grepper.next_tool = '<leader>g'
<
------------------------------------------------------------------------------

If you don't like the default arguments to a grep tool or you want to add a
new one, just replace/add a key to g:grepper!

In the best case, the output of the tool uses a format that is already
recognized by |'grepformat'|. Otherwise you can define it yourself:
>
    let g:grepper = {
        \ 'tools': ['pt'],
        \ 'pt': {
        \   'grepprg':    'pt --nocolor --nogroup',
        \   'grepformat': '%f:%l:%m',
        \   'escape':     '\+*^$()[]',
        \ }}
<
==============================================================================
AUTOCMD                                                        *grepper-autocmd*

When a grep tool finishes running, the plugin emits an event. Handle it like
this:
>
    autocmd User Grepper <execute any normal commands here>
<
NOTE: If you intend to use |:echo| or a similar command, also use |:unsilent|
before it.

==============================================================================
COLORS                                                          *grepper-colors*

The search prompt is highlighted via the |hl-Question| group. Change it like
this:
>
    highlight Question ctermfg=160 guifg=#ff0000 cterm=NONE
>
For error messages, |hl-ErrorMsg| is used.

==============================================================================
EXAMPLE                                                        *grepper-example*

This is a possible configuration..
>
    " for browsing the input history
    cnoremap <c-n> <down>
    cnoremap <c-p> <up>

    nmap gs <plug>(GrepperOperator)
    xmap gs <plug>(GrepperOperator)

    nnoremap <leader>g :Grepper! -tool git<cr>
    nnoremap <leader>G :Grepper! -tool ag<cr>
    nnoremap <leader>* :Grepper! -tool ag -cword!<cr>

    let g:grepper = {
        \ 'tools':     ['git', 'ag', 'grep'],
        \ 'open':      1,
        \ 'switch':    1,
        \ 'jump':      0,
        \ 'next_tool': '<leader>g',
        \ }
<
If you don't like this way of setting options, you can also set them like
this:
>
    let g:grepper           = {}
    let g:grepper.tools     = ['git', 'ag', 'grep']
    let g:grepper.open      = 1
    let g:grepper.switch    = 1
    let g:grepper.jump      = 0
    let g:grepper.next_tool = '<leader>g'
<
==============================================================================
vim: tw=78
